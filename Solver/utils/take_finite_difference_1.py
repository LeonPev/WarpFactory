
import numpy as np

def take_finite_difference_1(A, k, delta, phiphi_flag=False):
    s = A.shape
    B = np.zeros(s)

    if s[k] >= 5:
        if k == 0:
            B[2:-2] = (-(A[4:] - A[:-4]) + 8 * (A[3:-1] - A[1:-3])) / (12 * delta)
            B[:2] = B[2]
            B[-2:] = B[-3]
        elif k == 1:
            B[:, 2:-2] = (-(A[:, 4:] - A[:, :-4]) + 8 * (A[:, 3:-1] - A[:, 1:-3])) / (12 * delta)
            B[:, :2] = B[:, 2]
            B[:, -2:] = B[:, -3]
        elif k == 2:
            B[:, :, 2:-2] = (-(A[:, :, 4:] - A[:, :, :-4]) + 8 * (A[:, :, 3:-1] - A[:, :, 1:-3])) / (12 * delta)
            if phiphi_flag:
                B[:, :, 0] = 2 * 4
                B[:, :, 1] = 2 * 3
                B[:, :, -2] = 2 * (s[2] - 6)
                B[:, :, -1] = 2 * (s[2] - 5)
            else:
                B[:, :, :2] = B[:, :, 2]
                B[:, :, -2:] = B[:, :, -3]
        elif k == 3:
            B[:, :, :, 2:-2] = (-(A[:, :, :, 4:] - A[:, :, :, :-4]) + 8 * (A[:, :, :, 3:-1] - A[:, :, :, 1:-3])) / (12 * delta)
            B[:, :, :, :2] = B[:, :, :, 2]
            B[:, :, :, -2:] = B[:, :, :, -3]

    return B